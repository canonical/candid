<!DOCTYPE html>
<html dir="ltr" lang="en">
<head>
  <title>Candid - MFA Registration</title>

  <meta http-equiv="x-ua-compatible" content="IE=edge">
  <meta charset="utf-8">

  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="description" content="">
  <meta name="author" content="Juju team">
  
  <link rel="shortcut icon" href="../../static/favicon.ico">
  <link rel="stylesheet" href="../../static/css/vanilla.css">
  <link rel="stylesheet" href="../../static/css/manage-keys.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js"></script>
</head>
<body>
  <div class="p-strip">
    <div class="row">
      <div class="col-2 col-start-large-6 col-small-2 col-medium-3">
        <img src="../../static/images/logo-canonical-aubergine.svg" alt="Canonical" />
      </div>
    </div>
  </div>
    <div class="p-strip">
    <div class="row">
      <div class="col-6 col-start-large-4">
        <div class="p-card--highlighted">
          <h1 class="p-heading--four">Manage security keys</h1>
          {{if .Error}}
            <div class="p-notification--negative">
              <p class="p-notification__response">
                <span class="p-notification__status">Error:</span>{{.Error}}
              </p>
            </div>
          {{end}}
          <p class="p-text" id='note'>{{.Note}}</p>
          <h2 class="p-heading--five">Your registered security keys</h2>
          <ul class="p-list--divided" id="credentials"></ul>
          <div class="row">
            <label for="security-key">New security key</label>
            <input type="text" id="credentialName" name="security-key" placeholder="Credential name" maxlength="44" required>
          </div>
          <button class="p-button--positive u-no-margin--bottom" onclick="registerSecurityKey()" disabled id="registration-button">Register</button>
          <hr class="u-sv1">
          <div class="logged-meesage">You are logged in. You can close this window.</div>
        </div>
      </div>
    </div>
  </div>
  
<script>
var mfaState = {{.MFAState}};
var loginData = {{.LoginData}};
var registrationData = {{.RegistrationData}};

$(document).ready(function () {
  // check whether current browser supports WebAuthn
  if (!window.PublicKeyCredential) {
    document.getElementById("note").innerHTML = "Your browser does not support WebAuthn.";
    return;
  }
  if (loginData !== JSON.stringify({})) {
    document.getElementById("registration-button").disabled = false;
  } else {
    window.location.replace("/login");
  }
});

function removeCredential(url) {
  fetch(url + "&mfa-state=" + mfaState, {method: "POST"}) 
    .then((response) => {
      if (!response.ok) {
        document.getElementById("note").innerHTML = "Failed to remove the security device: " + response.statusText;  
        return Promise.reject(response.statusText);
      } else {
        document.getElementById("note").innerHTML = "Security device removed.";
        return response.json()
      }
    })
    .then((data) => {
      console.log(data)
      credentials = data.credentials;

      printSecurityKeys(credentials);
      if (credentials.length === 0) {
        document.getElementById("login-button").disabled = true;
      }
    })
    .catch(function (err) {
      document.getElementById("note").innerHTML = "Failed to remove the security device: " + err;
    });
}

function registerSecurityKey() {
  var credentialName = document.getElementById("credentialName").value;
  var credential = null;

  makeCredentialOptions = JSON.parse(registrationData);

  makeCredentialOptions.publicKey.challenge = bufferDecode(
    makeCredentialOptions.publicKey.challenge
  );
  makeCredentialOptions.publicKey.user.id = bufferDecode(
    makeCredentialOptions.publicKey.user.id
  );
  if (makeCredentialOptions.publicKey.excludeCredentials) {
    for (
      var i = 0;
      i < makeCredentialOptions.publicKey.excludeCredentials.length;
      i++
    ) {
      makeCredentialOptions.publicKey.excludeCredentials[i].id = bufferDecode(
        makeCredentialOptions.publicKey.excludeCredentials[i].id
      );
    }
  }
  navigator.credentials
    .create({
      publicKey: makeCredentialOptions.publicKey,
    })
    .then(function (newCredential) {
      let attestationObject = new Uint8Array(
        newCredential.response.attestationObject
      );
      let clientDataJSON = new Uint8Array(
        newCredential.response.clientDataJSON
      );
      let rawId = new Uint8Array(newCredential.rawId);
      fetch({{.RegistrationURL}} + "&mfa-state=" + mfaState + "&credential-name=" + credentialName, {
        method: "POST",
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          id: newCredential.id,
          rawId: bufferEncode(rawId),
          type: newCredential.type,
          response: {
            attestationObject: bufferEncode(attestationObject),
            clientDataJSON: bufferEncode(clientDataJSON),
          },
        }),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
      })
        .then((response) => {
          if (!response.ok) {
            document.getElementById("note").innerHTML =
              "Failed to register the security device: " + response.statusText;
            return Promise.reject(response.statusText);
          } else {
            return response.json();
          }
        })
        .then((data) => {
          mfaState = data.state;
          registrationData = data.registrationdata;
          credentials = data.credentials;
          document.getElementById("note").innerHTML = "You are now logged in.";
          document.getElementById("credentialName").value = "";

          printSecurityKeys(credentials);
        })
        .catch((error) => {
          return Promise.reject("login failed");
        });
    })
    .then((response) => {
      document.getElementById("note").innerHTML =
        "Successfully registed the security device";
    })
    .catch(function (err) {
      document.getElementById("note").innerHTML =
        "Failed to register the security device" + err;
    });
}

function printSecurityKeys(credentials) {
  let credentialsDIV = document.getElementById("credentials");
  credentialsDIV.innerHTML = '';
  credentials.forEach( item => {
    let div = document.createElement("div");
    div.classList.add("security-keys__item", "p-list__item");
    let innerHtml = 
      `<div class="security-keys__key-name">` +
      item.name +
      `</div>
    `;
    if (credentials.length > 1) {
      div.classList.add("security-keys__item--removable");
      innerHtml += `
      <button class="remove-security-key-button u-no-margin--bottom" onclick="removeCredential('` +
        item.removeurl +
        `')">
        <i class="p-icon--delete"></i>
      </button>
    `;
    }
    div.innerHTML = innerHtml; 
    credentialsDIV.appendChild(div);
  });
}


// Base64 to ArrayBuffer
function bufferDecode(value) {
  return Uint8Array.from(atob(value), (c) => c.charCodeAt(0));
}

// ArrayBuffer to URLBase64
function bufferEncode(value) {
  return btoa(String.fromCharCode.apply(null, new Uint8Array(value)))
    .replace(/\+/g, "-")
    .replace(/\//g, "_")
    .replace(/=/g, "");
}

</script>

</body>
</html>
