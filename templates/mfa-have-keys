<!DOCTYPE html>
<html dir="ltr" lang="en">
<head>
  <title>Candid - MFA Registration</title>

  <meta http-equiv="x-ua-compatible" content="IE=edge">
  <meta charset="utf-8">

  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="description" content="">
  <meta name="author" content="Juju team">
  
  <link rel="shortcut icon" href="../../static/favicon.ico">
  <link rel="stylesheet" href="../../static/css/vanilla.css">
  <link rel="stylesheet" href="../../static/css/mfa.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js"></script>
</head>
<body>
  <div class="p-strip">
    <div class="row">
      <div class="col-2 col-start-large-6 col-small-2 col-medium-3">
        <img src="../../static/images/logo-canonical-aubergine.svg" alt="Canonical" />
      </div>
    </div>
  </div>
    <div class="p-strip">
    <div class="row">
      <div class="col-6 col-start-large-4">
        <div class="p-card--highlighted">
          <h1 class="p-heading--four">Authentication</h1>
          {{if .Error}}
            <div class="p-notification--negative">
              <p class="p-notification__response">
                <span class="p-notification__status">Error:</span>{{.Error}}
              </p>
            </div>
          {{end}}
          <p class="p-text" id='note'>{{.Note}}</p>
          <h2 class="p-heading--five">Your registered security keys</h2>
          <ul class="p-list--divided" id="credentials"></ul>
          <hr class="u-sv1">
          <p class="u-no-margin--bottom">
            <i class="p-icon--information"></i>Use a registered security key to log in. You can manage your keys when logged in.
          </p>
        </div>
      </div>
    </div>
  </div>
  
<script>
var mfaState = {{.MFAState}};
var loginData = {{.LoginData}};
var registrationData = {{.RegistrationData}};

$(document).ready(function () {
  // check whether current browser supports WebAuthn
  if (!window.PublicKeyCredential) {
    document.getElementById("note").innerHTML = "Your browser does not support WebAuthn.";
    return;
  }
  if (loginData !== JSON.stringify({})) {
    loginUser();
  } else {
    document.getElementById("registration-button").disabled = false;
  }
});

function finishLogin() {
  window.location.replace({{.LoginURL}} + "&mfa-state=" + mfaState);
}

function loginUser() {
  credentialRequestOptions = JSON.parse(loginData);
  credentialRequestOptions.publicKey.challenge = bufferDecode(
    credentialRequestOptions.publicKey.challenge
  );
  credentialRequestOptions.publicKey.allowCredentials.forEach(function (
    listItem
  ) {
    listItem.id = bufferDecode(listItem.id);
  });
  navigator.credentials
    .get({
      publicKey: credentialRequestOptions.publicKey,
    })
    .then((assertion) => {
      let authData = assertion.response.authenticatorData;
      let clientDataJSON = assertion.response.clientDataJSON;
      let rawId = assertion.rawId;
      let sig = assertion.response.signature;
      let userHandle = assertion.response.userHandle;
      assertionData = JSON.stringify({
        id: assertion.id,
        rawId: bufferEncode(rawId),
        type: assertion.type,
        response: {
          authenticatorData: bufferEncode(authData),
          clientDataJSON: bufferEncode(clientDataJSON),
          signature: bufferEncode(sig),
          userHandle: bufferEncode(userHandle),
        },
      });
      fetch({{.LoginURL}} + "&mfa-state=" + mfaState, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: assertionData,
      })
      .then((response) => {
        if (!response.ok) {
          document.getElementById("note").innerHTML =
            "Login failed: " + response.statusText;
          return Promise.reject(response.statusText);
        } else {
          return response.json();
        }
      })
      .then((data) => {
        // Successfully logged in
        mfaState = data.state;
        registrationData = data.registrationdata;
        credentials = data.credentials;
        finishLogin();
      })
      .catch((error) => {
        return Promise.reject("login failed");
      });
    })
    .catch((error) => {
      document.getElementById("note").innerHTML =
        "Login failed: " + error;
    });
}

function printSecurityKeys(credentials) {
  let credentialsDIV = document.getElementById("credentials");
  credentialsDIV.innerHTML = '';
  credentials.forEach( item => {
    let div = document.createElement("div");
    div.classList.add("security-keys__item", "p-list__item");
    let innerHtml = 
      `<div class="security-keys__key-name">` +
      item.name +
      `</div>
    `;
    if (credentials.length > 1) {
      div.classList.add("security-keys__item--removable");
      innerHtml += `
      <button class="remove-security-key-button u-no-margin--bottom" onclick="removeCredential('` +
        item.removeurl +
        `')">
        <i class="p-icon--delete"></i>
      </button>
    `;
    }
    div.innerHTML = innerHtml; 
    credentialsDIV.appendChild(div);
  });
}

// Base64 to ArrayBuffer
function bufferDecode(value) {
  return Uint8Array.from(atob(value), (c) => c.charCodeAt(0));
}

// ArrayBuffer to URLBase64
function bufferEncode(value) {
  return btoa(String.fromCharCode.apply(null, new Uint8Array(value)))
    .replace(/\+/g, "-")
    .replace(/\//g, "_")
    .replace(/=/g, "");
}

</script>

</body>
</html>
